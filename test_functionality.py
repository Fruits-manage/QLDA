"""
Test script ƒë·ªÉ test t·∫•t c·∫£ ch·ª©c nƒÉng c·∫ßn thi·∫øt
"""

import os
import sys
import django
import requests
from datetime import datetime, date

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fruit_manage.settings')
django.setup()

from products.models import Product, Category, Unit
from companies.models import Company
from orders.models import Order, OrderDetail
from inventory.models import Warehouse, InventoryStock, StockMovement
from accounts.models import User
from news.models import News
from django.contrib.auth import get_user_model

def test_functionality():
    """Test c√°c ch·ª©c nƒÉng ch√≠nh"""
    print("üß™ COMPREHENSIVE FUNCTIONALITY TEST")
    print("=" * 80)
    
    User = get_user_model()
    
    # Setup test user
    user, created = User.objects.get_or_create(
        username='testuser2025',
        defaults={
            'email': 'test2025@example.com',
            'first_name': 'Test',
            'last_name': 'User 2025',
            'is_staff': True,
            'is_superuser': True
        }
    )
    if created:
        user.set_password('test123456')
        user.save()
    
    results = []
    
    # Test 1: T·∫°o ƒë∆°n h√†ng
    print("\nüìã Test 1: T·∫°o ƒë∆°n h√†ng...")
    try:
        # T·∫°o d·ªØ li·ªáu c·∫ßn thi·∫øt
        category = Category.objects.create(
            name='Test Category Order',
            description='Test for order'
        )
        
        unit = Unit.objects.create(
            name='test_unit_order',
            description='Test Unit for Order'
        )
        
        product = Product.objects.create(
            code='TESTORDER001',
            name='Test Product for Order',
            category=category,
            unit=unit,
            cost_price=2000,
            selling_price=3000,
            shelf_life_days=10,
            storage_temperature_min=5,
            storage_temperature_max=25,
            humidity_requirement=80,
            hs_code='123456'
        )
        
        company = Company.objects.create(
            name='Test Company Order',
            company_type='limited',
            tax_code='TESTORDER123',
            is_active=True
        )
        
        # T·∫°o ƒë∆°n h√†ng
        order = Order.objects.create(
            order_type='domestic_sale',
            company=company,
            delivery_date=date(2025, 9, 15),
            shipping_address='Test Order Address',
            payment_status='pending',
            created_by=user
        )
        
        # T·∫°o chi ti·∫øt ƒë∆°n h√†ng
        order_detail = OrderDetail.objects.create(
            order=order,
            product=product,
            quantity=10,
            unit_price=3000,
            total_price=30000
        )
        
        # C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
        order.subtotal = 30000
        order.discount_amount = 0
        order.total_amount = 30000
        order.save()
        
        print(f"  ‚úÖ ƒê∆°n h√†ng t·∫°o th√†nh c√¥ng: {order.order_number}")
        print(f"    - Kh√°ch h√†ng: {company.name}")
        print(f"    - S·∫£n ph·∫©m: {product.name} x {order_detail.quantity}")
        print(f"    - T·ªïng ti·ªÅn: {order.total_amount:,} VND")
        results.append(("T·∫°o ƒë∆°n h√†ng", True))
        
        # Cleanup
        order_detail.delete()
        order.delete()
        company.delete()
        product.delete()
        category.delete()
        unit.delete()
        
    except Exception as e:
        print(f"  ‚ùå T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i: {str(e)}")
        results.append(("T·∫°o ƒë∆°n h√†ng", False))
    
    # Test 2: Th√™m kho m·ªõi
    print("\nüè™ Test 2: Th√™m kho m·ªõi...")
    try:
        import random
        random_num = random.randint(10000, 99999)
        
        warehouse = Warehouse.objects.create(
            name=f'Kho Test {random_num}',
            code=f'KHO{random_num}',
            address=f'ƒê·ªãa ch·ªâ kho test {random_num}',
            capacity=5000.00,
            manager=user,
            is_active=True
        )
        
        print(f"  ‚úÖ Kho t·∫°o th√†nh c√¥ng: {warehouse.name}")
        print(f"    - M√£ kho: {warehouse.code}")
        print(f"    - S·ª©c ch·ª©a: {warehouse.capacity} t·∫•n")
        print(f"    - Qu·∫£n l√Ω: {warehouse.manager.get_full_name()}")
        results.append(("Th√™m kho m·ªõi", True))
        
        warehouse.delete()
        
    except Exception as e:
        print(f"  ‚ùå Th√™m kho m·ªõi th·∫•t b·∫°i: {str(e)}")
        results.append(("Th√™m kho m·ªõi", False))
    
    # Test 3: T·∫°o bi·∫øn ƒë·ªông kho
    print("\nüì¶ Test 3: T·∫°o bi·∫øn ƒë·ªông kho...")
    try:
        import random
        random_num = random.randint(10000, 99999)
        
        # T·∫°o d·ªØ li·ªáu c·∫ßn thi·∫øt
        category = Category.objects.create(
            name=f'Test Cat Movement {random_num}',
            description='Test for movement'
        )
        
        unit = Unit.objects.create(
            name=f'test_unit_mv{random_num}',
            description='Test Unit for Movement'
        )
        
        product = Product.objects.create(
            code=f'TESTMV{random_num}',
            name=f'Test Product Movement {random_num}',
            category=category,
            unit=unit,
            cost_price=1500,
            selling_price=2500,
            shelf_life_days=7,
            storage_temperature_min=10,
            storage_temperature_max=20,
            humidity_requirement=75,
            hs_code='123456'
        )
        
        warehouse = Warehouse.objects.create(
            name=f'Kho Movement Test {random_num}',
            code=f'KHOMV{random_num}',
            address='ƒê·ªãa ch·ªâ kho movement test',
            capacity=3000.00,
            manager=user,
            is_active=True
        )
        
        # T·∫°o bi·∫øn ƒë·ªông nh·∫≠p kho
        movement = StockMovement.objects.create(
            warehouse=warehouse,
            product=product,
            movement_type='inbound',
            quantity=50,
            unit_cost=1500,
            notes='Test nh·∫≠p kho',
            created_by=user
        )
        
        # Ki·ªÉm tra t·ªìn kho
        try:
            stock = InventoryStock.objects.get(
                warehouse=warehouse,
                product=product
            )
            stock_quantity = stock.quantity
        except InventoryStock.DoesNotExist:
            stock_quantity = 0
        
        print(f"  ‚úÖ Bi·∫øn ƒë·ªông kho t·∫°o th√†nh c√¥ng:")
        print(f"    - Lo·∫°i: {movement.get_movement_type_display()}")
        print(f"    - S·∫£n ph·∫©m: {product.name}")
        print(f"    - S·ªë l∆∞·ª£ng: {movement.quantity}")
        print(f"    - T·ªìn kho sau bi·∫øn ƒë·ªông: {stock_quantity}")
        results.append(("T·∫°o bi·∫øn ƒë·ªông kho", True))
        
        # Cleanup
        if 'stock' in locals():
            stock.delete()
        movement.delete()
        warehouse.delete()
        product.delete()
        category.delete()
        unit.delete()
        
    except Exception as e:
        print(f"  ‚ùå T·∫°o bi·∫øn ƒë·ªông kho th·∫•t b·∫°i: {str(e)}")
        results.append(("T·∫°o bi·∫øn ƒë·ªông kho", False))
    
    # Test 4: Th√™m s·ª≠a x√≥a tin t·ª©c
    print("\nüì∞ Test 4: Qu·∫£n l√Ω tin t·ª©c...")
    try:
        from news.models import NewsCategory
        
        # T·∫°o category tr∆∞·ªõc
        category = NewsCategory.objects.create(
            name='Test Category News',
            description='Test category for news'
        )
        
        # Th√™m tin t·ª©c
        news = News.objects.create(
            title='Tin t·ª©c test 2025',
            slug='tin-tuc-test-2025',
            summary='T√≥m t·∫Øt tin t·ª©c test cho nƒÉm 2025',
            content='N·ªôi dung tin t·ª©c test cho nƒÉm 2025',
            category=category,
            news_type='internal',
            author=user,
            status='published'
        )
        
        print(f"  ‚úÖ Th√™m tin t·ª©c: {news.title}")
        
        # S·ª≠a tin t·ª©c
        news.title = 'Tin t·ª©c test 2025 - ƒê√£ c·∫≠p nh·∫≠t'
        news.content = 'N·ªôi dung tin t·ª©c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
        news.save()
        
        print(f"  ‚úÖ S·ª≠a tin t·ª©c: {news.title}")
        
        # X√≥a tin t·ª©c
        news_title = news.title
        news.delete()
        category.delete()
        
        print(f"  ‚úÖ X√≥a tin t·ª©c: {news_title}")
        results.append(("Qu·∫£n l√Ω tin t·ª©c", True))
        
    except Exception as e:
        print(f"  ‚ùå Qu·∫£n l√Ω tin t·ª©c th·∫•t b·∫°i: {str(e)}")
        results.append(("Qu·∫£n l√Ω tin t·ª©c", False))
    
    # Test 5: T·∫°o kh√°ch h√†ng m·ªõi
    print("\nüè¢ Test 5: T·∫°o kh√°ch h√†ng m·ªõi...")
    try:
        import random
        random_num = random.randint(10000, 99999)
        
        customer = Company.objects.create(
            name=f'Kh√°ch h√†ng test {random_num}',
            company_type='limited',
            tax_code=f'KH{random_num}',
            phone=f'0901{random_num}',
            email=f'customer{random_num}@test.com',
            address=f'ƒê·ªãa ch·ªâ kh√°ch h√†ng {random_num}',
            website=f'https://customer{random_num}.com',
            is_active=True
        )
        
        print(f"  ‚úÖ Kh√°ch h√†ng t·∫°o th√†nh c√¥ng: {customer.name}")
        print(f"    - M√£ s·ªë thu·∫ø: {customer.tax_code}")
        print(f"    - ƒêi·ªán tho·∫°i: {customer.phone}")
        print(f"    - Email: {customer.email}")
        results.append(("T·∫°o kh√°ch h√†ng", True))
        
        customer.delete()
        
    except Exception as e:
        print(f"  ‚ùå T·∫°o kh√°ch h√†ng th·∫•t b·∫°i: {str(e)}")
        results.append(("T·∫°o kh√°ch h√†ng", False))
    
    # Test 6: Test URL payments
    print("\nüí≥ Test 6: Test trang payments...")
    try:
        # Ki·ªÉm tra n·∫øu c√≥ payments app
        try:
            from django.urls import reverse
            payments_url = reverse('payments:list')  # Fixed: 'list' not 'payment_list'
            print(f"  ‚úÖ Payments URL t·ªìn t·∫°i: /payments/")
            results.append(("Payments URL", True))
        except:
            print(f"  ‚ö†Ô∏è  Payments app ch∆∞a c√≥ ho·∫∑c URL ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a")
            results.append(("Payments URL", False))
        
    except Exception as e:
        print(f"  ‚ùå Test payments th·∫•t b·∫°i: {str(e)}")
        results.append(("Payments URL", False))
    
    # Cleanup test user
    user.delete()
    
    # Final Summary
    print("\n" + "=" * 80)
    print("üèÜ K·∫æT QU·∫¢ TEST CH·ª®C NƒÇNG")
    print("=" * 80)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ TH√ÄNH C√îNG" if result else "‚ùå TH·∫§T B·∫†I"
        print(f"{test_name:<25} {status}")
        if result:
            passed += 1
    
    success_rate = (passed / total) * 100
    print(f"\nüìä T·ª∂ L·ªÜ TH√ÄNH C√îNG: {passed}/{total} ({success_rate:.1f}%)")
    
    if success_rate == 100:
        print("üéâ HO√ÄN H·∫¢O! T·∫•t c·∫£ ch·ª©c nƒÉng ho·∫°t ƒë·ªông t·ªët!")
    elif success_rate >= 80:
        print("‚úÖ T·ªêT! Ph·∫ßn l·ªõn ch·ª©c nƒÉng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh.")
    elif success_rate >= 60:
        print("‚ö†Ô∏è  KH·∫§P KHI·ªÇNG! M·ªôt s·ªë ch·ª©c nƒÉng c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra.")
    else:
        print("‚ùå C·∫¶N C·∫¢I THI·ªÜN! Nhi·ªÅu ch·ª©c nƒÉng c√≥ v·∫•n ƒë·ªÅ.")
    
    print("\nüîß URLs C·∫¶N KI·ªÇM TRA TH·ª¶ C√îNG:")
    print("üìã T·∫°o ƒë∆°n h√†ng: http://127.0.0.1:8000/orders/create/")
    print("üè™ Th√™m kho m·ªõi: http://127.0.0.1:8000/inventory/warehouses/create/")
    print("üì¶ T·∫°o bi·∫øn ƒë·ªông: http://127.0.0.1:8000/inventory/movements/create/")
    print("üì∞ Qu·∫£n l√Ω tin t·ª©c: http://127.0.0.1:8000/news/")
    print("üè¢ T·∫°o kh√°ch h√†ng: http://127.0.0.1:8000/companies/create/")
    print("üí≥ Trang payments: http://127.0.0.1:8000/payments/")

if __name__ == '__main__':
    test_functionality()
